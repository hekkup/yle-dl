#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
yle-dl - rtmpdump frontend for Yle Areena, Elävä Arkisto and YleX Areena

Copyright (C) 2010-2012 Antti Ajanki <antti.ajanki@iki.fi>

This script extracts RTMP stream information from Yle Areena
(http://areena.yle.fi), YleX Areena (http://ylex.yle.fi/ylex-areena),
Elävä Arkisto (http://yle.fi/elavaarkisto/index.html) web pages and
calls rtmpdump with correct parameters.
"""

import sys
import urllib
import urllib2
import re
import subprocess
import os
import os.path
import signal
import urlparse
import htmlentitydefs
import json
import string
import xml.dom.minidom
import time
import codecs
import base64
from Crypto.Cipher import AES

version = "1.99.8 (2.0 beta 8)"

AREENA_NG_RTMP = 'rtmp://flashk.yle.fi/mediakanta//x'
# x above is a placeholder, yle plugin will construct the real playpath.
# Two slashes after mediakanta is similar to what YLE player does.
AREENA_NG_SWF = 'http://areena.yle.fi/static/player/1.2.8/flowplayer/flowplayer.commercial-3.2.7-encrypted.swf'
AREENA_NG_TCURL = 'rtmp://flashk.yle.fi/mediakanta/'
AREENA_NG_CLIP_TEMPLATE = 'http://areena.yle.fi/%s/%s'
AREENA_NG_HTTP_HEADERS = {'User-Agent': 'yle-dl/' + version.split(' ')[0]}

AREENA_LIVE_SWF = 'http://areena.yle.fi/player/Application.swf?build=2'
AREENA_LIVE_TCURL = 'rtmp://flashk.yle.fi/AreenaServer'

AREENA_RADIO_SWF = 'http://static.yle.fi/global/player/version/1.2.7/flowplayer/flowplayer.commercial-3.2.7-encrypted.swf'
AREENA_RADIO_TCURL = 'rtmp://flashu.yle.fi/AreenaServer/'

ARKISTO_SWF = 'http://yle.fi/elavaarkisto/flowplayer/flowplayer.commercial-3.2.7.swf?0.7134730119723827'
RTMPDUMP_OPTIONS_ARKISTO = ['-s', ARKISTO_SWF, '-m', '60']

RTMPDUMP_OPTIONS_YLEX = ['-m', '60']

# list of all options that require an argument
ARGOPTS = ('--rtmp', '-r', '--host', '-n', '--port', '-c', '--socks',
           '-S', '--swfUrl', '-s', '--tcUrl', '-t', '--pageUrl', '-p',
           '--app', '-a', '--swfhash', '-w', '--swfsize', '-x', '--swfVfy',
           '-W', '--swfAge', '-X', '--auth', '-u', '--conn', '-C',
           '--flashVer', '-f', '--subscribe', '-d', '--flv', '-o',
           '--timeout', '-m', '--start', '-A', '--stop', '-B', '--token',
           '-T', '--skip', '-k')

# rtmpdump exit codes
RD_SUCCESS = 0
RD_FAILED = 1
RD_INCOMPLETE = 2

debug = False
excludechars_linux = '*/|'
excludechars_windows = '\"*/:<>?|'
excludechars = excludechars_linux
rtmpdump_binary = None

def log(msg):
    enc = sys.stderr.encoding or 'UTF-8'
    sys.stderr.write(msg.encode(enc, 'backslashreplace'))
    sys.stderr.write('\n')
    sys.stderr.flush()

def usage():
    """Print the usage message to stderr"""
    log(u'yle-dl %s: Download media files from Yle Areena and Elävä Arkisto' % version)
    log(u'Copyright (C) 2009-2012 Antti Ajanki <antti.ajanki@iki.fi>, license: GPLv2')
    log(u'')
    log(u'%s [yle-dl or rtmpdump options] URL' % sys.argv[0])
    log(u'')
    log(u'yle-dl options:')
    log(u'')
    log(u'--latestepisode         Download the latest episode')
    log(u"--showurl               Print librtmp-compatible URL, don't download")
    log(u'--vfat                  Create Windows-compatible filenames')
    log(u'--sublang lang          Download subtitles, lang = fin, swe, smi, none or all')
    log(u'--rtmpdump path         Set path to rtmpdump binary')
    log(u'--destdir dir           Save files to dir')
    log(u'')
    log(u'rtmpdump options:')
    log(u'')
    subprocess.call([rtmpdump_binary, '--help'])

def download_page(url):
    """Returns contents of a HTML page at url."""
    if url.find('://') == -1:
        url = 'http://' + url
    if '#' in url:
        url = url[:url.find('#')]

    request = urllib2.Request(url, headers=AREENA_NG_HTTP_HEADERS)
    try:
        urlreader = urllib2.urlopen(request)
        content = urlreader.read()

        charset = urlreader.info().getparam('charset')
        if not charset:
            metacharset = re.search(r'<meta [^>]*?charset="(.*?)"', content)
            if metacharset:
                charset = metacharset.group(1)
        if not charset:
            charset = 'iso-8859-1'

        return unicode(content, charset, 'replace')
    except urllib2.URLError, exc:
        log(u"Can't read %s: %s" % (url, exc))
        return None
    except ValueError:
        log(u'Invalid URL: ' + url)
        return None

def encode_url_utf8(url):
    """Encode the path component of url to percent-encoded UTF8."""
    (scheme, netloc, path, params, query, fragment) = urlparse.urlparse(url)

    path = path.encode('UTF8')

    # Assume that the path is already encoded if there seems to be
    # percent encoded entities.
    if re.search(r'%[0-9A-Fa-f]{2}', path) is None:
        path = urllib.quote(path, '/+')

    return urlparse.urlunparse((scheme, netloc, path, params, query, fragment))

def decode_html_entity(entity):
    if not entity:
        return u''

    try:
        x = htmlentitydefs.entitydefs[entity]
    except KeyError:
        x = entity

    if x.startswith('&#') and x[-1] == ';':
        x = x[1:-1]

    if x[0] == '#':
        try:
            return unichr(int(x[1:]))
        except (ValueError, OverflowError):
            return u'?'
    else:
        return unicode(x, 'iso-8859-1', 'ignore')

def replace_entitydefs(content):
    return re.sub(r'&(.*?);', lambda m: decode_html_entity(m.group(1)), content)

def sane_filename(name):
    if isinstance(name, unicode):
        tr = dict((ord(c), ord(u'_')) for c in excludechars)
    else:
        tr = string.maketrans(excludechars, '_'*len(excludechars))
    x = name.strip(' .').translate(tr)
    if x:
        return x
    else:
        return 'ylevideo'

def execute_rtmpdump(args):
    """Start rtmpdump process with argument list args and wait until
    completion."""
    if debug:
        log('Executing:')
        log(' '.join(x.decode('UTF-8') for x in args))

    try:
        rtmpdump_process = subprocess.Popen(args)
        return rtmpdump_process.wait()
    except KeyboardInterrupt:
        try:
            os.kill(rtmpdump_process.pid, signal.SIGINT)
            rtmpdump_process.wait()
        except OSError:
            # The rtmpdump process died before we killed it.
            pass
        return RD_INCOMPLETE
    except OSError, exc:
        log(u'Execution failed: ' + unicode(exc, 'UTF-8', 'replace'))
        return RD_INCOMPLETE

def downloader_factory(url):
    if url.startswith('http://www.yle.fi/elavaarkisto/') or \
            url.startswith('http://yle.fi/elavaarkisto/'):
        return ElavaArkistoDownloader()
    elif url.startswith('http://ylex.yle.fi/'):
        return YleXDownloader()
    elif url.startswith('http://areena.yle.fi/player/index.php?'):
        return AreenaNGLiveDownloader()
    elif url.startswith('http://areena.yle.fi/radio/soitin/') or \
         url == 'http://yle.fi/puhe/live':
        return AreenaRadioDownloader()
    else:
        return AreenaNGDownloader()

def get_output_filename(args_in):
    prev = None
    args = list(args_in) # copy
    while args:
        opt = args.pop()
        if opt in ('-o', '--flv'):
            if prev:
                return prev.decode(sys.getfilesystemencoding())
            else:
                return None
        prev = opt
    return None

def is_resume_job(args):
    return '--resume' in args or '-e' in args

def next_available_filename(proposed):
    i = 1
    filename = proposed 
    basename, ext = os.path.splitext(proposed)
    while os.path.exists(filename):
        log(u'%s exists, trying an alternative name' % filename)
        filename = basename + '-' + str(i) + ext
        i += 1
    return filename

def which(program):
    """Search for program on $PATH and return the full path if found."""
    # Adapted from
    # http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python

    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def parse_rtmp_single_component_app(rtmpurl):
    """Extract single path-component app and playpath from rtmpurl."""
    # YLE server requires that app is the first path component
    # only. By default librtmp would take the first two
    # components (app/appInstance).
    #
    # This also means that we can't rely on librtmp's playpath
    # parser and have to duplicate the logic here.
    k = 0
    for i, x in enumerate(rtmpurl):
        if x == '/':
            k += 1
            if k == 4:
                break

    playpath = rtmpurl[(i+1):]
    app_only_rtmpurl = rtmpurl[:i]

    ext = os.path.splitext(playpath)[1]
    if ext == '.mp4':
        playpath = 'mp4:' + playpath
        ext = '.flv'
    elif ext == '.mp3':
        playpath = 'mp3:' + playpath[:-4]

    return (app_only_rtmpurl, playpath, ext)

def log_output_file(outputfile, done=False):
    if outputfile and outputfile != '-':
        if done:
            log(u'Stream saved to ' + outputfile)
        else:
            log(u'Output file: ' + outputfile)


### Areena (new) ###


class AreenaNGDownloader:
    # Extracted from
    # http://areena.yle.fi/static/player/1.2.8/flowplayer/flowplayer.commercial-3.2.7-encrypted.swf
    AES_KEY = 'hjsadf89hk123ghk'
    
    def download_episodes(self, url, parameters, latest_episode, sublang, destdir):
        """Extract all episodes (or just the latest episode if
        latest_only is True) from url."""
        return self.process_episodes(url, parameters, latest_episode, sublang, destdir, False)

    def print_urls(self, url, latest_episode, sublang='all'):
        """Extract episodes from url and print their
        librtmp-compatible URLs on stdout."""
        return self.process_episodes(url, [], latest_episode, sublang, None, True)

    def process_episodes(self, url, parameters, latest_only, sublang, destdir, print_url):
        playlist = self.get_playlist(url, latest_only)
        if not playlist:
            return RD_FAILED

        for clip in playlist:
            res = self.process_single_episode(clip, parameters, sublang, destdir, print_url)
            if res != RD_SUCCESS:
                return res

        return RD_SUCCESS

    def process_single_episode(self, url, parameters, sublang, destdir, print_url):
        """Extracts Areena player params from a web page at url and
        starts a rtmpdump process."""
        areenaparams = self.get_areena_params(url)
        if not areenaparams:
            return RD_FAILED

        if areenaparams.has_key('title'):
            filename = areenaparams['title']
            date = areenaparams.get('broadcasted', None) or \
                   areenaparams.get('productionDate', None)
            if date:
                filename += '-' + date.replace('/', '-').replace(' ', '-')
            filename = sane_filename(filename)
            filename += '.flv'
        else:
            filename = 'areena.flv'

        if destdir:
            filename = os.path.join(destdir, filename)

        if areenaparams.get('live', '') == 'true':
            islive = ' live=1'
        else:
            islive = ''
        
        papiurl = 'http://papi.yle.fi/ng/mod/rtmp/' + areenaparams['id']
        papi = download_page(papiurl)
        papi_decoded = self.decode_papi(papi)

        if debug:
            log(papi_decoded)

        try:
            papi_xml = xml.dom.minidom.parseString(papi_decoded)
        except Exception as exc:
            print exc
            return RD_FAILED

        nodelist = papi_xml.getElementsByTagName('connect')
        if len(nodelist) != 1 or len(nodelist[0].childNodes) != 1:
            return RD_FAILED
        rtmp_connect = nodelist[0].firstChild.nodeValue

        nodelist = papi_xml.getElementsByTagName('stream')
        if len(nodelist) != 1 or len(nodelist[0].childNodes) != 1:
            return RD_FAILED
        rtmp_stream = nodelist[0].firstChild.nodeValue

        parsed_rtmp = urlparse.urlparse(rtmp_connect)
        edgefcs = parsed_rtmp.netloc
        ident = download_page('http://%s/fcs/ident' % edgefcs)
        if ident is None:
            return RD_FAILED

        if debug:
            log(ident)

        try:
            identxml = xml.dom.minidom.parseString(ident)
        except Exception as exc:
            print exc
            return RD_FAILED

        nodelist = identxml.getElementsByTagName('ip')
        if len(nodelist) != 1 or len(nodelist[0].childNodes) != 1:
            return RD_FAILED
        rtmp_ip = nodelist[0].firstChild.nodeValue

        app_without_fcsvhost = parsed_rtmp.path.lstrip('/')
        baseapp, auth = app_without_fcsvhost.split('?', 1)
        app = '%s?_fcs_vhost=%s&%s' % (baseapp, edgefcs, auth)

        rtmpbase = 'rtmpe://%s/ondemand' % edgefcs
        tcurl = 'rtmpe://%s/%s' % (rtmp_ip, app)

        rtmpurl = '%s app=%s playpath=%s tcUrl=%s pageUrl=%s swfUrl=%s swfVfy=1' % \
                  (rtmpbase, app, rtmp_stream, tcurl,
                   url, AREENA_NG_SWF)

        if print_url:
            print rtmpurl
            return RD_SUCCESS

        enc = sys.getfilesystemencoding()
        outputparam = []
        if '-o' not in parameters and '--flv' not in parameters:
            if not is_resume_job(parameters):
                filename = next_available_filename(filename)
            outputparam = ['-o', filename.encode(enc, 'replace')]

        args = [rtmpdump_binary]
        args += ['-r', rtmpurl.encode(enc)]
        args += parameters
        args += outputparam
        if islive:
            args += ['--live']

        outputfile = get_output_filename(args)
        if areenaparams.has_key('subtitles'):
            self.download_subtitles(areenaparams['subtitles'], sublang, outputfile)

        log_output_file(outputfile)

        retcode = execute_rtmpdump(args)
        if retcode != RD_SUCCESS:
            return retcode

        log_output_file(outputfile, True)

        return retcode

    def decode_papi(self, papi):
        try:
            bytestring = base64.b64decode(str(papi))
        except (UnicodeEncodeError, TypeError):
            return None
        
        iv = bytestring[:16]
        ciphertext = bytestring[16:]
        padlen = 16 - (len(ciphertext) % 16)
        ciphertext = ciphertext + '\0'*padlen

        decrypter = AES.new(self.AES_KEY, AES.MODE_CFB, iv, segment_size=16*8)
        return decrypter.decrypt(ciphertext)[:-padlen]

    def get_playlist(self, url, latest_episode):
        (scheme, netloc, path, params, query, fragment) = urlparse.urlparse(url)
        episodeurl = urlparse.urlunparse((scheme, netloc, path + '.json', params, query, ''))
        jsonstr = download_page(episodeurl)

        if debug:
            log(jsonstr)

        try:
            fulldata = json.loads(jsonstr)
        except ValueError:
            log(u'Invalid JSON file at ' +  episodeurl)
            return None

        if fulldata.get('contentType', '') in ['EPISODE', 'PROGRAM', 'CLIP']:
            # This is a single episode page
            return [url]

        else:
            # The page contains several episodes
            if fulldata.has_key('availableEpisodes'):
                available_episodes = fulldata['availableEpisodes']
                episodes = available_episodes.get('video', []) + \
                           available_episodes.get('audio', [])
            else:
                episodes = fulldata.get('search', {}).get('results', [])

            playlist = []
            for clip in episodes:
                if not clip.has_key('id') or not clip.has_key('type'):
                    continue

                if clip['type'] == 'audio':
                    urltype = 'radio'
                else:
                    urltype = 'tv'

                playlist.append(AREENA_NG_CLIP_TEMPLATE % (urltype, clip['id']))

            if not playlist:
                log(u'Error: can\'t find streams at ' + url)
                return None

            if latest_episode:
                playlist = [playlist[0]]

            return playlist

    def get_areena_params(self, url):
        """Download a web page at url and return Areena parameters
        extracted from it."""
        html = download_page(url)
        if html is None:
            return None

        areenaparams = self.extract_params(html)
        if areenaparams is None:
            log(u"Can't find clip parameters.")
            log(u"Is %s really a YLE Areena video page?" % url)
            return None

        return areenaparams

    def extract_params(self, html):
        m = re.search(r'<script>.*?AREENA.clip\s*=\s*(.*?})\s*?$',
                      html, re.DOTALL | re.MULTILINE)
        if not m:
            return None

        params = self.parse_JS_object(m.group(1))

        if not params or not params.has_key('id'):
            return None
        else:
            return params

    def parse_JS_object(self, jsobj):
        """Convert a Javascript object into a Python object."""

        # First convert into JSON and then apply JSON parser. The
        # following is tuned for Areena HTML and will very likely break
        # on other inputs.
        x = ' '.join(self.convert_tokens(jsobj))
        try:
            return json.loads(x)
        except ValueError:
            log('Invalid JSON')
            return None

    def convert_tokens(self, data):
        """Rudimentary generator that reads Javascript data and yields
        JSONified tokens"""
        while True:
            data = data.lstrip()
            if not data:
                raise StopIteration
            elif re.match(r'[]:,{}[]', data):
                yield data[0]
                data = data[1:]
            elif data.startswith("'"):
                if data[1] == "'":
                    yield '""'
                    data = data[2:]
                else:
                    data = data[1:]
                    m = re.search(r"[^\\]'", data)
                    s = data[:m.start()+1]
                    s = s.replace("\\'", "'")
                    s = re.sub(r'([^\\])"', '\g<1>\\"', s)
                    yield '"%s"' % s
                    data = data[m.end():]
            else:
                m = re.match(r"([a-zA-Z0-9_]+)", data)
                yield '"%s"' % m.group(1)
                data = data[m.end():]

    def download_subtitles(self, available_subtitles, preferred_lang, videofilename):
        basename = os.path.splitext(videofilename)[0]
        subtitlefile = None
        for sub in available_subtitles:
            lang = sub.get('lang', '')
            if lang == preferred_lang or preferred_lang == 'all':
                url = sub.get('url', None)
                if url:
                    try:
                        subtitlefile = basename + '.' + lang + '.srt'
                        urllib.urlretrieve(url, subtitlefile)
                        self.add_BOM(subtitlefile)
                        log(u'Subtitles saved to ' + subtitlefile)
                        if preferred_lang != 'all':
                            return subtitlefile
                    except IOError, exc:
                        log(u'Failed to download subtitles at %s: %s' % (url, exc))
        return subtitlefile

    def add_BOM(self, filename):
        """Add byte-order mark into a file.

        Assumes (but does not check!) that the file is UTF-8 encoded.
        """
        content = open(filename, 'r').read()
        if content.startswith(codecs.BOM_UTF8):
            return
        
        f = open(filename, 'w')
        f.write(codecs.BOM_UTF8)
        f.write(content)
        f.close()


### Areena live ###

class AreenaNGLiveDownloader:
    def download_episodes(self, url, parameters, latest_episode, sublang, destdir):
        """Download episode at url."""
        return self.process_episodes(url, parameters, destdir, False)

    def print_urls(self, url, latest_episode, sublang='all'):
        """Extract episodes from url and print their
        librtmp-compatible URLs on stdout."""
        return self.process_episodes(url, [], None, True)

    def process_episodes(self, url, parameters, destdir, print_url):
        streamid, language = self.extract_stream_id(url)
        if streamid is None:
            return RD_FAILED

        metadata = self.get_metadata(streamid, language)
        if not metadata:
            return RD_FAILED

        is_akamai_stream = metadata.get('akamai', False)
        if is_akamai_stream:
            rtmpurl = self.get_akamai_rtmp_url(metadata, url)
        else:
            rtmpurl = self.get_areena_live_rtmp_url(metadata, url)
        
        if not rtmpurl:
            return RD_FAILED

        if print_url:
            print rtmpurl
            return RD_SUCCESS

        enc = sys.getfilesystemencoding()
        outputparam = []
        if '-o' not in parameters and '--flv' not in parameters:
            filename = self.create_output_filename(metadata, destdir)
            outputparam = ['-o', filename.encode(enc, 'replace')]

        args = [rtmpdump_binary]
        args += ['-r', rtmpurl.encode(enc)]
        args += parameters
        args += outputparam
        if ' live=1' in rtmpurl:
            args.append('--live')

        outputfile = get_output_filename(args)
        log_output_file(outputfile)

        retcode = execute_rtmpdump(args)
        if retcode != RD_SUCCESS:
            return retcode

        log_output_file(outputfile, True)

        return RD_SUCCESS

    def get_xml_nodes(self, xmlurl, nodenames):
        """Download XML file from xmlurl and parse first-level childs
        named in nodenames."""
        xmlstr = download_page(xmlurl)
        if not xmlstr:
            return None

        try:
            xmldoc = xml.dom.minidom.parseString(xmlstr)
        except Exception:
            return None

        rootnode = xmldoc.documentElement
        if rootnode is None:
            return None

        res = {}
        for nodename in nodenames:
            try:
                res[nodename] = rootnode.getElementsByTagName(nodename)[0].firstChild.nodeValue
            except IndexError:
                pass

        return res
        
    def extract_stream_id(self, url):
        """Extract stream ID from the live stream URL."""
        query = urlparse.urlparse(url).query
        qdict = urlparse.parse_qs(query)
        if 'stream' not in qdict:
            log('No stream ID in URL')
            return None, None
        
        streamid = qdict['stream'][0]
        language = qdict.get('language', ['fi'])[0]

        return (streamid, language)

    def get_metadata(self, streamid, language):
        """Download and parse metadata."""
        metaurl = 'http://areena.yle.fi/meta/streams/info/%s/lang/%s' % (streamid, language)
        metadata_json = download_page(metaurl)
        if not metadata_json:
            log('Failed to download metadata JSON')
            return None

        if debug:
            log(metadata_json)

        try:
            metadata_and_status = json.loads(metadata_json)
        except ValueError:
            log('Failed to parse metadata JSON')
            return None

        metadata_code = metadata_and_status.get('status', {}).get('code', None)
        if metadata_code != 200:
            log(u'Unexpected status code ' + str(metadata_code))
            return None

        return metadata_and_status.get('data', {})

    def get_akamai_rtmp_url(self, metadata, pageurl):
        """Parse Akamai stream parameters and return RTMP stream URL."""
        streamurl = metadata.get('url', None)
        if not streamurl:
            log('No url in metadata!')
            return None

        required_parameters = ['hostname', 'appName', 'streamName', 'authParams']
        akamai = self.get_xml_nodes(streamurl, required_parameters)
        if akamai is None or len(akamai) != len(required_parameters):
            log('Failed to parse Akamai XML')
            return None

        ident = self.get_xml_nodes('http://%s/fcs/ident' % akamai['hostname'], ['ip'])
        if ident is None or 'ip' not in ident:
            log('Failed to parse ident')
            return None
        
        rtmpaddress = 'rtmp://%s/%s?%s?_fcs_vhost=%s&%s' % \
            (ident['ip'], akamai['appName'], akamai['authParams'],
             akamai['hostname'], akamai['authParams'])

        if '&slist=' not in akamai['authParams']:
            log('Live stream not fully supported')
            return None
            
        slist = akamai['authParams'].split('&slist=', 1)[1]

        playpath = '%s?%s&%s' % \
            (slist, akamai['authParams'], akamai['authParams'])
        app = '%s?%s?_fcs_vhost=%s&%s' % \
            (akamai['appName'], akamai['authParams'], akamai['hostname'],
             akamai['authParams'])
        tcurl = 'rtmp://%s/%s' % (ident['ip'], playpath)

        rtmpurl = '%s playpath=%s swfUrl=%s tcUrl=%s pageUrl=%s live=1' % \
            (rtmpaddress, playpath, AREENA_LIVE_SWF, tcurl, pageurl)

        return rtmpurl

    def get_areena_live_rtmp_url(self, metadata, pageurl):
        """Parse Areena live stream parameters and return RTMP stream
        URL."""
        rtmpaddress = metadata.get('url', None)
        if not rtmpaddress:
            log('No url in metadata!')
            return None

        rtmpaddress, playpath = parse_rtmp_single_component_app(rtmpaddress)[:2]

        rtmpurl = '%s playpath=%s swfUrl=%s tcUrl=%s pageUrl=%s conn=S:1 live=1 yleauth=1' % \
            (rtmpaddress, playpath, AREENA_LIVE_SWF, AREENA_LIVE_TCURL, pageurl)
        
        return rtmpurl

    def create_output_filename(self, metadata, destdir):
        """Construct filename for the stream."""
        title = metadata.get('title', None) or 'ylelive'
        date = metadata.get('broadcastDateTime', None)
        filename = title
        if date:
            filename += '-' + date.replace('/', '-').replace(' ', '-')
        filename += '.flv'
        filename = sane_filename(filename)
        if destdir:
            filename = os.path.join(destdir, filename)
        filename = next_available_filename(filename)
        return filename


### Areena radio ###

class AreenaRadioDownloader:
    def download_episodes(self, url, parameters, latest_episode, sublang, destdir):
        """Download live radio stream at url."""
        return self.process_radio_stream(url, parameters, destdir, False)

    def print_urls(self, url, latest_episode, sublang='all'):
        """Extract live radio stream from url and print
        librtmp-compatible URLs to stdout."""
        return self.process_radio_stream(url, [], None, True)

    def process_radio_stream(self, url, parameters, destdir, print_url):
        metadata = self.get_radio_metadata(url)
        if not metadata:
            log(u'Failed to download metadata')
            return RD_FAILED

        rtmpurl = self.get_radio_rtmp_url(metadata, url)
        if not rtmpurl:
            return RD_FAILED

        if print_url:
            print rtmpurl
            return RD_SUCCESS

        enc = sys.getfilesystemencoding()
        curtime = time.strftime('-%Y-%m-%d-%H:%M:%S')
        filename = metadata.get('title', 'yle-radio') + curtime + '.flv'
        outputparam = []
        if '-o' not in parameters and '--flv' not in parameters:
            filename = next_available_filename(filename)
            outputparam = ['-o', filename.encode(enc, 'replace')]

        args = [rtmpdump_binary]
        args += ['-r', rtmpurl.encode(enc)]
        args += parameters
        args += outputparam
        if ' live=1' in rtmpurl:
            args.append('--live')

        outputfile = get_output_filename(args)
        log_output_file(outputfile)

        retcode = execute_rtmpdump(args)
        log_output_file(outputfile, True)

        return retcode

    def get_radio_rtmp_url(self, metadata, pageurl):
        rtmp = metadata.get('url', '')
        if not rtmp:
            log(u'No url in metadata!')
            return None

        rtmpbase, playpath = parse_rtmp_single_component_app(rtmp)[:2]

        rtmpurl = '%s playpath=%s swfUrl=%s tcUrl=%s pageUrl=%s conn=S:0 live=1 yleauth=1' % \
            (rtmpbase, playpath, AREENA_RADIO_SWF, AREENA_RADIO_TCURL, pageurl)
        
        return rtmpurl

    def get_data_id(self, url):
        if url == 'http://yle.fi/puhe/live':
            # Yle Puhe's dataid is hidden in the JS code
            # (http://yle.fi/puhe/js/puhe_pop-up.js). It's hard-coded
            # here to avoid the need for a full-blown JS parser.
            return '48'

        html = download_page(url)
        if not html:
            return None

        channeltag = re.search(r'<[^>]* id="live-channel"[^>]*>', html)
        if not channeltag:
            return None

        dataid = re.search(r' data-id="(\w+)"', channeltag.group(0))
        if not dataid:
            return None
        
        return dataid.group(1)
        
    def get_radio_metadata(self, url):
        dataid = self.get_data_id(url)
        if not dataid:
            return None

        metaurl = 'http://areena.yle.fi/meta/channels/info/%s?lang_id=fin' % dataid
        metadatastr = download_page(metaurl)
        if not metadatastr:
            return None

        try:
            metadata = json.loads(metadatastr)
        except ValueError:
            log(u'Invalid JSON at ' + metaurl)
            return None

        return metadata.get('data', {})


### Elava Arkisto ###


class ElavaArkistoDownloader:

    def extract_playlist(self, mediajson):
        pagedata = json.loads(mediajson)
        if not pagedata.has_key('media'):
            return []

        clips = []
        for mediaitem in pagedata['media']:
            title = sane_filename(mediaitem.get('title', 'elavaarkisto'))

            downloadURL = mediaitem.get('downloadURL', None)

            bestrate = 0
            bestrtmpurl = ''
            for clip in mediaitem.get('urls', {}).get('domestic', []):
                rate = float(clip.get('bitrate', 0))
                url = clip.get('url', '')
                if rate > bestrate and url:
                    bestrate = rate
                    bestrtmpurl = url

            if not bestrtmpurl:
                continue

            rtmpurl, playpath, ext = parse_rtmp_single_component_app(bestrtmpurl)

            clips.append({'rtmp': rtmpurl,
                          'playpath': playpath,
                          'downloadURL': downloadURL,
                          'filename': title + ext})
            
        return clips

    def download_single_episode(self, rtmpurl, playpath, downloadURL,
                                filename, parameters, pageurl):
        enc = sys.getfilesystemencoding()

        if downloadURL:
            log('Downloading from HTTP server...')
            log_output_file(filename)
            
            try:
                urllib.urlretrieve(downloadURL, filename.encode(enc))
            except IOError, exc:
                log(u'Download failed: ' + str(exc))
                return RD_FAILED
            
            log_output_file(filename, True)
            return RD_SUCCESS
        else:
            args = [rtmpdump_binary]
            args += RTMPDUMP_OPTIONS_ARKISTO
            args += ['-r', rtmpurl.encode(enc),
                     '-y', playpath.encode(enc),
                     '-p', pageurl.encode(enc),
                     '-o', filename.encode(enc, 'replace')]
            args += parameters

            outputfile = get_output_filename(args)
            log_output_file(outputfile)

            retcode = execute_rtmpdump(args)
            if retcode != RD_SUCCESS:
                return retcode

            log_output_file(outputfile, True)

            return retcode

    def print_librtmp_url(self, rtmpurl, playpath, pageurl, downloadURL):
        """Print a librtmp-compatible Elava Arkisto URL to stdout."""
        if downloadURL:
            print downloadURL
        else:
            print '%s playpath=%s swfUrl=%s pageUrl=%s' % \
                (rtmpurl, playpath, ARKISTO_SWF, pageurl)
        return RD_SUCCESS

    def get_playlist(self, url, latest_episode):
        (scheme, netloc, path, params, query, fragment) = urlparse.urlparse(url)

        if '.' in path:
            path = path.rsplit('.', 1)[0]
        path = path + '.json'
        jsonurl = urlparse.urlunparse((scheme, netloc, path, '', '', ''))
        
        mediajson = download_page(jsonurl)
        if mediajson is None:
            return None

        # Yle server sends UTF-8 but doesn't set charset in
        # Content-type header. This will workaround the problem.
        mediajson = mediajson.encode('iso-8859-1').decode('utf-8')

        playlist = self.extract_playlist(mediajson)
        if len(playlist) == 0:
            log(u"Can't find streams at %s." % url)
            return None

        if latest_episode:
            playlist = playlist[:1]

        return playlist

    def download_episodes(self, url, parameters, latest_episode, sublang, destdir):
        """Download playlist from Elava Arkisto page at url and
        download all clips using rtmpdump."""
        playlist = self.get_playlist(url, latest_episode)
        if playlist is None:
            return RD_FAILED

        for clip in playlist:
            filename = clip['filename']
            if destdir:
                filename = os.path.join(destdir, filename)

            if not is_resume_job(parameters):
                filename = next_available_filename(filename)

            status = self.download_single_episode(clip['rtmp'],
                                                  clip['playpath'],
                                                  clip['downloadURL'],
                                                  filename,
                                                  parameters, url)
            if status != RD_SUCCESS:
                return status

        return RD_SUCCESS

    def print_urls(self, url, latest_episode):
        """Download playlist from Elava Arkisto page at url and print
        a librtmp-compatible URL for each clip."""
        playlist = self.get_playlist(url, latest_episode)
        if playlist is None:
            return RD_FAILED

        for clip in playlist:
            self.print_librtmp_url(clip['rtmp'], clip['playpath'],
                                   url, clip['downloadURL'])

        return RD_SUCCESS


### YleX Areena ###


class YleXDownloader:

    def download_episodes(self, url, argv, latest_episode, sublang, destdir):
        """Download a stream from the given YleX Areena url using
        rtmpdump."""
        html = download_page(url)
        if not html:
            return RD_FAILED

        outputoptions = []
        if not '-o' in argv and not '--flv' in argv:
            match = re.search(r'<h1[^>]*>(.*?)</h1>', html)
            if match:
                filename = sane_filename(replace_entitydefs(match.group(1))) + '.flv'
            else:
                filename = 'ylex.flv'

            if destdir:
                filename = os.path.join(destdir, filename)

            if not is_resume_job(argv):
                filename = next_available_filename(filename)

            outputoptions = ['-o', filename.encode(sys.getfilesystemencoding(), 'ignore')]

        rtmpurl = self.get_rtmp_url(html, url)
        if not rtmpurl:
            return RD_FAILED

        args = [rtmpdump_binary]
        args += ['-r', rtmpurl]
        args += RTMPDUMP_OPTIONS_YLEX
        args += outputoptions
        args += argv

        outputfile = get_output_filename(args)
        log_output_file(outputfile)

        retcode = execute_rtmpdump(args)
        if retcode != RD_SUCCESS:
            return retcode

        log_output_file(outputfile, True)

        return retcode

    def print_urls(self, url, latest_episode):
        """Print a librtmp-compatible YleX Areena URL to stdout."""
        html = download_page(url)
        if not html:
            return RD_FAILED

        rtmpurl = self.get_rtmp_url(html, url)
        if not rtmpurl:
            return RD_FAILED

        print rtmpurl
        return RD_SUCCESS

    def get_rtmp_url(self, html, pageurl):
        match = re.search(r'jQuery.extend\([^,]*,(.*)\)', html)
        if not match:
            return None

        ylexdata = json.loads(match.group(1).strip())

        enc = sys.getfilesystemencoding()
        try:
            clip = ylexdata['YlexAreena']['clip'][0]
            swf = 'http://ylex.yle.fi' + ylexdata['YlexFlowplayer']['src']
            return '%s playpath=%s swfUrl=%s pageUrl=%s yleAuth=1' % \
                (clip['plugins']['bwcheck']['hosts'][0]['host'].encode(enc),
                 clip['clip']['url'].encode(enc),
                 swf.encode(enc),
                 pageurl.encode(enc))
        except (KeyError, IndexError):
            return None


### main program ###

    
def main():
    global debug
    global rtmpdump_binary
    latest_episode = False
    url_only = False
    sublang = 'all'
    show_usage = False
    url = None
    destdir = None

    argv = list(sys.argv[1:])
    rtmpdumpargs = []
    while argv:
        arg = argv.pop(0)
        if not arg.startswith('-'):
            url = arg
        elif arg in ['--verbose', '-V', '--debug', '-z']:
            debug = True
            rtmpdumpargs.append(arg)
        elif arg in ['--help', '-h']:
            show_usage = True
        elif arg in ['--latestepisode']:
            latest_episode = True
        elif arg == '--showurl':
            url_only = True
        elif arg == '--vfat':
            global excludechars
            global excludechars_windows
            excludechars = excludechars_windows
        elif arg == '--sublang':
            if argv:
                sublang = argv.pop(0)
        elif arg == '--rtmpdump':
            if argv:
                rtmpdump_binary = argv.pop(0)
        elif arg == '--destdir':
            if argv:
                destdir = argv.pop(0)
        else:
            rtmpdumpargs.append(arg)
            if arg in ARGOPTS and argv:
                rtmpdumpargs.append(argv.pop(0))
            
    if not rtmpdump_binary:
        if sys.platform == 'win32':
            rtmpdump_binary = which('rtmpdump.exe')
        else:
            rtmpdump_binary = which('rtmpdump')
    if not rtmpdump_binary:
        log(u'Error: rtmpdump not found on path, use --rtmpdump for setting the location')

    if show_usage or url is None:
        usage()
        sys.exit(1)

    # Is sys.getfilesystemencoding() the correct encoding for
    # sys.argv?
    encoding = sys.getfilesystemencoding()
    try:
        url = unicode(url, encoding)
    except UnicodeDecodeError:
        log(u'Warning: Failed to encode URL!')
        url = unicode(url, 'ascii', 'replace')

    url = encode_url_utf8(url)
    dl = downloader_factory(url)

    if url_only:
        sys.exit(dl.print_urls(url, latest_episode))
    else:
        sys.exit(dl.download_episodes(url, rtmpdumpargs, latest_episode, sublang, destdir))


if __name__ == '__main__':
    main()
